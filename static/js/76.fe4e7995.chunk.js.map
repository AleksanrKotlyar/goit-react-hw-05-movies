{"version":3,"file":"static/js/76.fe4e7995.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","page/Movies.jsx","servises/APImovies.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const MovieGallery = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin: 0 auto;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const MovieItem = styled.li`\n  padding: ${p => p.theme.space[3]}px;\n  /* width: 260px;\n  height: 350px; */\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const MovieImage = styled.img`\n  margin-bottom: ${p => p.theme.space[4]}px;\n  width: 100%;\n  height: 260px;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\nexport const MovieTitle = styled.h2``;\n\nexport const Linka = styled(Link)`\n  text-decoration: none;\n  color: black;\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport {\n  MovieGallery,\n  MovieItem,\n  MovieImage,\n  MovieTitle,\n  Linka,\n} from './MoviesList.styled';\n\nconst MoviesList = ({ data }) => {\n  const BASE_URL = 'https://image.tmdb.org/t/p/w500';\n  const { pathname } = useLocation();\n\n  return (\n    <MovieGallery>\n      {data.map(({ id, backdrop_path, origin_title, title }) => (\n        <MovieItem key={id}>\n          <Linka to={`/movies/${id}`} state={{ from: pathname }}>\n            <MovieImage\n              src={`${BASE_URL}${backdrop_path}`}\n              alt=\"poster\"\n              // onClick={() => console.log('нажали')}\n            />\n            <MovieTitle>{title || origin_title}</MovieTitle>\n          </Linka>\n        </MovieItem>\n      ))}\n    </MovieGallery>\n  );\n};\n\nMoviesList.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default MoviesList;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  max-width: 400px;\n  margin: 0 auto;\n  align-items: center;\n  max-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  color: #fff;\n  background-color: #f66632;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  height: 30px;\n  width: 100%;\n  max-width: 300px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchFormButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  :hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormButtonLabel = styled.label`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n\n  font: inherit;\n  font-size: 16px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n\n  ::placeholder {\n    font: inherit;\n    font-size: 16px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { FcSearch } from 'react-icons/fc';\n// import { useState } from 'react';\nimport {\n  Header,\n  SearchForm,\n  SearchFormButton,\n  SearchFormButtonLabel,\n  SearchFormInput,\n} from './Searchbar.styled';\nimport toast, { Toaster } from 'react-hot-toast';\n\nconst Searchbar = ({ value, onChange, getMoviesByQuery }) => {\n  const handleOnSubmit = e => {\n    e.preventDefault();\n    const query = e.currentTarget.elements.input.value;\n    if (query.trim() === '') {\n      return toast('Enter a request.', {\n        duration: 1000,\n        position: 'top-right',\n        style: { 'background-color': 'yellow' },\n      });\n    }\n\n    getMoviesByQuery(query);\n    // e.currentTarget.reset();\n  };\n\n  return (\n    <Header>\n      <SearchForm onSubmit={handleOnSubmit}>\n        <SearchFormButton type=\"submit\">\n          <FcSearch />\n          <SearchFormButtonLabel>Search</SearchFormButtonLabel>\n        </SearchFormButton>\n        <Toaster />\n        <SearchFormInput\n          name=\"input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n          value={value}\n          onChange={e => onChange(e.target.value)}\n        />\n      </SearchForm>\n    </Header>\n  );\n};\n\nSearchbar.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  getMoviesByQuery: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import { searchMoviesByQuery } from 'servises/APImovies';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('name') ?? '';\n\n  async function getMoviesByQuery(query) {\n    const response = await searchMoviesByQuery(query);\n\n    setMovies(response);\n  }\n\n  const visibleMovie = movies?.filter(movie =>\n    (movie.original_title.toLowerCase() || movie.title.toLowerCase()).includes(\n      movieName.toLowerCase()\n    )\n  );\n\n  const updateQueryString = name => {\n    const nextParams = name !== '' ? { name } : {};\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <main>\n      <Searchbar\n        value={movieName}\n        onChange={updateQueryString}\n        getMoviesByQuery={getMoviesByQuery}\n      />\n      <MoviesList data={visibleMovie} />\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a3dd0056fa523609f3ab9fe8602576dd';\n\nasync function fetchGenres() {\n  if (localStorage.getItem('genresDataArray' !== null)) {\n    return;\n  }\n  try {\n    const genresDataArray = await axios.get(\n      `/genre/movie/list?language=en-US&api_key=${API_KEY}`\n    );\n    if (genresDataArray.status !== 200) {\n      return;\n    }\n\n    localStorage.setItem(\n      'genresDataArray',\n      JSON.stringify(genresDataArray.data.genres)\n    );\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getTrending() {\n  try {\n    const response = await axios.get(`/trending/movie/week?api_key=${API_KEY}`);\n\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function searchMovies(id) {\n  try {\n    const response = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function searchMoviesByQuery(query) {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&query='${query}'`\n    );\n\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function searchCast(movie_id) {\n  try {\n    const response = await axios.get(\n      `/movie/${movie_id}/credits?api_key=${API_KEY}`\n    );\n\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function searchReviews(movie_id) {\n  try {\n    const response = await axios.get(\n      `/movie/${movie_id}/reviews?api_key=${API_KEY}`\n    );\n\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\nexport {\n  fetchGenres,\n  getTrending,\n  searchMovies,\n  searchMoviesByQuery,\n  searchCast,\n  searchReviews,\n};\n"],"names":["MovieGallery","styled","MovieItem","p","theme","space","MovieImage","MovieTitle","Linka","Link","data","pathname","useLocation","map","id","backdrop_path","origin_title","title","to","state","from","src","alt","Header","SearchForm","SearchFormButton","SearchFormButtonLabel","SearchFormInput","value","onChange","getMoviesByQuery","onSubmit","e","preventDefault","query","currentTarget","elements","input","trim","toast","duration","position","style","type","name","autoComplete","autoFocus","placeholder","target","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","movieName","get","searchMoviesByQuery","response","visibleMovie","filter","movie","original_title","toLowerCase","includes","MoviesList","axios","API_KEY","fetchGenres","localStorage","getItem","genresDataArray","status","setItem","JSON","stringify","genres","console","log","getTrending","results","error","searchMovies","searchCast","movie_id","cast","searchReviews"],"sourceRoot":""}