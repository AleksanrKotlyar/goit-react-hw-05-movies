{"version":3,"file":"static/js/468.a076b242.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","page/Home.jsx","servises/APImovies.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const MovieGallery = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin: 0 auto;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const MovieItem = styled.li`\n  padding: ${p => p.theme.space[3]}px;\n  /* width: 260px;\n  height: 350px; */\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const MovieImage = styled.img`\n  margin-bottom: ${p => p.theme.space[4]}px;\n  width: 100%;\n  height: 260px;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\nexport const MovieTitle = styled.h2``;\n\nexport const Linka = styled(Link)`\n  text-decoration: none;\n  color: black;\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport {\n  MovieGallery,\n  MovieItem,\n  MovieImage,\n  MovieTitle,\n  Linka,\n} from './MoviesList.styled';\n\nconst MoviesList = ({ data }) => {\n  const BASE_URL = 'https://image.tmdb.org/t/p/w500';\n  // const { pathname } = useLocation();\n  const location = useLocation();\n\n  return (\n    <MovieGallery>\n      {data.map(({ id, backdrop_path, origin_title, title }) => (\n        <MovieItem key={id}>\n          <Linka to={`/movies/${id}`} state={{ from: location }}>\n            <MovieImage src={`${BASE_URL}${backdrop_path}`} alt=\"poster\" />\n            <MovieTitle>{title || origin_title}</MovieTitle>\n          </Linka>\n        </MovieItem>\n      ))}\n    </MovieGallery>\n  );\n};\n\nMoviesList.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default MoviesList;\n","import { fetchGenres, getTrending } from 'servises/APImovies';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { useEffect, useState } from 'react';\nimport toast from 'react-hot-toast';\n\nconst Home = () => {\n  const [trendingMovies, setTrendingMovies] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const movies = await getTrending();\n        setTrendingMovies(movies);\n      } catch (error) {\n        console.log(error);\n        toast(`${error}`, {\n          duration: 1000,\n          position: 'top-right',\n          style: { 'background-color': 'red' },\n        });\n      }\n    })();\n    const genre = JSON.parse(localStorage.getItem('genresDataArray'));\n    if (!genre) {\n      fetchGenres();\n    }\n  }, []);\n\n  if (!trendingMovies) return;\n  return (\n    <main>\n      <h1 style={{ marginBottom: '24px', textAlign: 'center' }}>\n        Trending today{' '}\n      </h1>\n      <MoviesList data={trendingMovies} />\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a3dd0056fa523609f3ab9fe8602576dd';\n\nasync function fetchGenres() {\n  if (localStorage.getItem('genresDataArray' !== null)) {\n    return;\n  }\n  try {\n    const genresDataArray = await axios.get(\n      `/genre/movie/list?language=en-US&api_key=${API_KEY}`\n    );\n    if (genresDataArray.status !== 200) {\n      return;\n    }\n\n    localStorage.setItem(\n      'genresDataArray',\n      JSON.stringify(genresDataArray.data.genres)\n    );\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getTrending() {\n  try {\n    const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function searchMovies(id) {\n  try {\n    const response = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function searchMoviesByQuery(query) {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&query='${query}'`\n    );\n\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function searchCast(movie_id) {\n  try {\n    const response = await axios.get(\n      `/movie/${movie_id}/credits?api_key=${API_KEY}`\n    );\n\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function searchReviews(movie_id) {\n  try {\n    const response = await axios.get(\n      `/movie/${movie_id}/reviews?api_key=${API_KEY}`\n    );\n\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\nexport {\n  fetchGenres,\n  getTrending,\n  searchMovies,\n  searchMoviesByQuery,\n  searchCast,\n  searchReviews,\n};\n"],"names":["MovieGallery","styled","MovieItem","p","theme","space","MovieImage","MovieTitle","Linka","Link","data","location","useLocation","map","id","backdrop_path","origin_title","title","to","state","from","src","alt","useState","trendingMovies","setTrendingMovies","useEffect","getTrending","movies","console","log","toast","duration","position","style","JSON","parse","localStorage","getItem","fetchGenres","marginBottom","textAlign","axios","API_KEY","genresDataArray","status","setItem","stringify","genres","response","results","error","searchMovies","searchMoviesByQuery","query","searchCast","movie_id","cast","searchReviews"],"sourceRoot":""}