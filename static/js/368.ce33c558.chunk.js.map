{"version":3,"file":"static/js/368.ce33c558.chunk.js","mappings":"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","sources":["components/MoviesCast/MoviesCast.styled.jsx","components/MoviesCast/MoviesCast.jsx","servises/APImovies.js"],"sourcesContent":["import styled from 'styled-components';\n\n// export const Item = styled('li')`\n//   margin-top: ${p => p.theme.space[4]}px;\n// `;\n\nexport const Paragraf = styled('p')`\n  margin-top: ${p => p.theme.space[1]}px;\n  font-size: ${p => p.theme.fontSizes.s}px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  gap: 10px;\n  align-items: center;\n  justify-content: start;\n`;\n\nexport const Section = styled.section`\n  padding: 15px 0;\n`;\n\nexport const List = styled.ul`\n  padding: 4px;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: 10px;\n  background-color: #ff990030;\n`;\n","import { searchCast } from 'servises/APImovies';\nimport { useState, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport { useParams } from 'react-router-dom';\nimport { List, Paragraf, ListItem } from './MoviesCast.styled';\n\nconst BASE_URL = 'https://image.tmdb.org/t/p/w300';\n\nconst MoviesCast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const searchCastMovie = await searchCast(movieId);\n        setCast(searchCastMovie);\n      } catch (error) {\n        toast(`${error}`, {\n          duration: 1000,\n          position: 'top-right',\n          style: { 'background-color': 'red' },\n        });\n      }\n    })();\n  }, [movieId]);\n\n  if (!cast) return;\n  return (\n    <List>\n      {cast?.map(({ id, name, character, profile_path }) => (\n        <ListItem key={id}>\n          <img\n            src={`${BASE_URL}${profile_path}`}\n            width=\"50px\"\n            height=\"60px\"\n            alt=\"photo_actor\"\n          />\n          <div>\n            <Paragraf>\n              <b>{name}</b>\n            </Paragraf>\n            <Paragraf>\n              <b>Character:</b> {character}\n            </Paragraf>\n          </div>\n        </ListItem>\n      ))}\n    </List>\n  );\n\n  //     {(cast.length > 0) &&\n  //     (<>\n  //         <List>\n  //         {cast?.map(({ id, name, character, profile_path }) => (\n  //           <ListItem key={id}>\n  //             <img\n  //               src={`${BASE_URL}${profile_path}`}\n  //               width=\"50px\"\n  //               height=\"60px\"\n  //               alt=\"photo_actor\"\n  //             />\n  //             <div>\n  //               <Paragraf>\n  //                 <b>{name}</b>\n  //               </Paragraf>\n  //               <Paragraf>\n  //                 <b>Character:</b> {character}\n  //               </Paragraf>\n  //             </div>\n  //           </ListItem>\n  //         ))}\n  //     </List>\n  //     </>\n  //     )}\n\n  // {(cast?.length == 0 ) && <div>No information</div> }\n};\n\nexport default MoviesCast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a3dd0056fa523609f3ab9fe8602576dd';\n\nasync function fetchGenres() {\n  if (localStorage.getItem('genresDataArray' !== null)) {\n    return;\n  }\n  try {\n    const genresDataArray = await axios.get(\n      `/genre/movie/list?language=en-US&api_key=${API_KEY}`\n    );\n    if (genresDataArray.status !== 200) {\n      return;\n    }\n\n    localStorage.setItem(\n      'genresDataArray',\n      JSON.stringify(genresDataArray.data.genres)\n    );\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getTrending() {\n  try {\n    const response = await axios.get(`/trending/movie/week?api_key=${API_KEY}`);\n\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function searchMovies(id) {\n  try {\n    const response = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function searchMoviesByQuery(query) {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&query='${query}'`\n    );\n\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function searchCast(movie_id) {\n  try {\n    const response = await axios.get(\n      `/movie/${movie_id}/credits?api_key=${API_KEY}`\n    );\n\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function searchReviews(movie_id) {\n  try {\n    const response = await axios.get(\n      `/movie/${movie_id}/reviews?api_key=${API_KEY}`\n    );\n\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\nexport {\n  fetchGenres,\n  getTrending,\n  searchMovies,\n  searchMoviesByQuery,\n  searchCast,\n  searchReviews,\n};\n"],"names":["Paragraf","styled","p","theme","space","fontSizes","s","ListItem","List","movieId","useParams","useState","cast","setCast","useEffect","searchCast","searchCastMovie","toast","duration","position","style","map","id","name","character","profile_path","src","width","height","alt","axios","API_KEY","fetchGenres","localStorage","getItem","genresDataArray","status","setItem","JSON","stringify","data","genres","console","log","getTrending","response","results","error","searchMovies","searchMoviesByQuery","query","movie_id","searchReviews"],"sourceRoot":""}